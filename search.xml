<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test</title>
    <url>/2022/05/17/test/</url>
    <content><![CDATA[<p>这是一篇测试文章</p>
<img src="/2022/05/17/test/test.png" class="" title="图片引用方法一">
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn2021公开赛 write-up</title>
    <url>/2021/06/01/ciscn2021/</url>
    <content><![CDATA[<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="glass-solver-Yuning-Ding"><a href="#glass-solver-Yuning-Ding" class="headerlink" title="glass (solver: Yuning Ding)"></a>glass (solver: Yuning Ding)</h3><p>找本地库函数，反解算法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> *</span><br><span class="line">key = <span class="string">&quot;12345678&quot;</span></span><br><span class="line">flag = [<span class="number">163</span>, <span class="number">26</span>, <span class="number">227</span>, <span class="number">105</span>, <span class="number">47</span>, <span class="number">187</span>, <span class="number">26</span>, <span class="number">132</span>, <span class="number">101</span>, <span class="number">194</span>, <span class="number">173</span>, <span class="number">173</span>, <span class="number">158</span>, <span class="number">150</span>, <span class="number">5</span>, <span class="number">2</span>,</span><br><span class="line"><span class="number">31</span>, <span class="number">142</span>, <span class="number">54</span>, <span class="number">79</span>, <span class="number">225</span>, <span class="number">235</span>, <span class="number">175</span>, <span class="number">240</span>, <span class="number">234</span>, <span class="number">196</span>, <span class="number">168</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">199</span>, <span class="number">110</span>, <span class="number">63</span>, <span class="number">176</span>,</span><br><span class="line"><span class="number">211</span>, <span class="number">204</span>, <span class="number">120</span>, <span class="number">249</span>, <span class="number">152</span>, <span class="number">63</span>]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">39</span>, <span class="number">8</span>):</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> (j + i &lt; <span class="number">39</span>):</span><br><span class="line">      flag[j + i] ^= <span class="built_in">ord</span>(key[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">39</span>, <span class="number">3</span>):</span><br><span class="line">  flag[i + <span class="number">1</span>] ^= flag[i]</span><br><span class="line">  flag[i + <span class="number">2</span>] ^= flag[i + <span class="number">1</span>]</span><br><span class="line">  flag[i] ^= flag[i + <span class="number">2</span>]</span><br><span class="line">cipher1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">        cipher += flag[i]</span><br><span class="line">flag = ARC4.new(key).decrypt(cipher1)</span><br><span class="line"><span class="built_in">print</span> flag</span><br></pre></td></tr></table></figure>

<h3 id="babe-bc-solver-wxc"><a href="#babe-bc-solver-wxc" class="headerlink" title="babe bc (solver: wxc)"></a>babe bc (solver: wxc)</h3><p>先用llvm-dis获得llvm ir文件，得到矩阵行列，再用放出来的提示文件，发现是个填数字的游戏，找到规则，填数字即可。</p>
<img src="/2021/06/01/ciscn2021/1.png" class="" title="图片引用方法一">

<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="easy-source-solver-Yuning-Ding"><a href="#easy-source-solver-Yuning-Ding" class="headerlink" title="easy source (solver: Yuning Ding)"></a>easy source (solver: Yuning Ding)</h3><p>赛题结束后无法复现，只能大致口头描述了<br>扫描后台目录，有个index.php.swp,查看代码 构造payload:ip&#x2F;index.php?ra&#x3D;User&amp;rb&#x3D;q&amp;rc&#x3D;ReflectionMethod&amp;rd&#x3D;getDocComment 得到flag</p>
<h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="rsa-solver-Yuning-Ding"><a href="#rsa-solver-Yuning-Ding" class="headerlink" title="rsa (solver: Yuning Ding)"></a>rsa (solver: Yuning Ding)</h3><p>分三部分加密，小公钥指数，共模，coopersmith。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## part1</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span>* <span class="comment">#python第三方库 from gmpy2 import* #python第三方库</span></span><br><span class="line">n= <span class="number">12381447039455059836328051884891454693813773102677797588584673367249449397570306</span> <span class="number">97600538674718362494732908287999625868558926859029020506300183129390105649456766</span> <span class="number">99712246249820341712155938398068732866646422826619477180434858148938235662092482</span> 058999079105450136181685141895955574548671667320167741641072330259009</span><br><span class="line">c= <span class="number">19105765285510667553313898813498220212421177527647187802549913914263968945493144</span> <span class="number">63339067060511625106455036470478935883007213334910880879907502154047981518265766</span> <span class="number">77636171780441109394588346549225407041963304519793493530315785184791994544804581</span> <span class="number">37984734402248011464467312753683234543319955893</span></span><br><span class="line">i=<span class="number">0</span> <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span>(iroot(c+i*n,<span class="number">3</span>)[<span class="number">1</span>]==<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(iroot(c+i*n,<span class="number">3</span>)[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">break</span> i=i+<span class="number">1</span></span><br><span class="line"><span class="comment">## part2</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s,s2n <span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert <span class="comment"># 欧几里得算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">  <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    g, y, x = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(): n=</span><br><span class="line"><span class="comment">#或者 iroot(c-i*n,3)</span></span><br><span class="line"><span class="number">11138196116958992789651255775428942047487763260733468530666797779493882401834579</span></span><br><span class="line"><span class="number">58363031614920765393759597316332706260914988439364019966488204510198115925945286</span></span><br><span class="line"><span class="number">73182109109991384472979198906744569181673282663323892346854520052840694924830064</span></span><br><span class="line"><span class="number">546269187849702880332522636682366270177489467478933966884097824069977</span></span><br><span class="line">  c1 =</span><br><span class="line"><span class="number">54995751387258798791895413216172284653407054079765769704170763023830130981480272</span></span><br><span class="line"><span class="number">94333844524568929372930820057421795901846251279052362225247925841949885830789811</span></span><br><span class="line"><span class="number">89070767734702535333448779595087662857305090678296844273757593456237016059970671</span></span><br><span class="line"><span class="number">35659404296663877453758701010726561824951602615501078818914410959610</span></span><br><span class="line">  c2 =</span><br><span class="line"><span class="number">91290935267458356541959327381220067466104890455391103989639822855753797805354139</span></span><br><span class="line"><span class="number">74195995795198394314610855276275644447554525034376679822034824037759011285489048</span></span><br><span class="line"><span class="number">23757448760161917734718537040147359366084362101536698294542881998388276464027425</span></span><br><span class="line"><span class="number">54134017280213707222338496271289894681312606239512924842845268366950</span></span><br><span class="line">e1 = <span class="number">17</span></span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">s = egcd(e1, e2) s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 求模反元素</span></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">s1 = - s1</span><br><span class="line">    c1 = invert(c1, n)</span><br><span class="line">  <span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2 = - s2</span><br><span class="line">    c2 = invert(c2, n)</span><br><span class="line">  m = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n) % n</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">hex</span>(m))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main()</span><br><span class="line"><span class="comment">## part3，sage运行</span></span><br><span class="line">n=<span class="number">113432930155033263769270712825121761080813952100666693606866355917116416984149</span></span><br><span class="line"><span class="number">16550723192518059386083625540295035832742244735920068953721752854762369158600895</span></span><br><span class="line"><span class="number">26190638468018298026374488744512289576357075539802106859852158871073004169695490</span></span><br><span class="line"><span class="number">87293746310593988908287181025770739538992559714587375763131132963783147</span></span><br><span class="line">p=<span class="number">711728669592547291800107184697390034264010777021485892818841976562815147862023</span></span><br><span class="line"><span class="number">6042882657992902</span></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line">kbits = pbits-p.nbits()</span><br><span class="line">p=p&lt;&lt;kbits</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;upper %d bits (of %d bits) is given&quot;</span> % (pbits-kbits, pbits))</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f=x+p</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>] <span class="comment"># find root &lt; 2^kbits with factor</span></span><br><span class="line">&gt;= n^<span class="number">0.4</span></span><br><span class="line">    <span class="built_in">print</span>(p+<span class="built_in">int</span>(x0))</span><br><span class="line"><span class="comment">## flag</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime</span><br><span class="line">a=<span class="number">0x200a4f2077696c6420576573742057696e642c2074686f7520627265617468206f6620417574</span></span><br><span class="line">756d6e2773206265696e672c0a54686f752c2066726f6d2077686f736520756e7365656e20707265</span><br><span class="line">73656e636520746865206c656176657320646561640a4172652064726976656e2c206c696b652067</span><br><span class="line">686f7374732066726f6d20616e20656e6368616e74657220666c6565696e672c0a59656c6c6f772c</span><br><span class="line">20616e6420626c61636b2c20616e642070616c652c20616e6420686563746963207265642c0a5065</span><br><span class="line">7374696c656e63652d73747269636b656e206d756c746974756465733a204f2074686f752c0a5768</span><br><span class="line">6f2063686172696f7465737420746f207468656972206461726b2077696e747279206265640a</span><br><span class="line">b=long_to_bytes(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">c=hashlib.md5(b).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>

<h3 id="imageencrypt-solver-Jialin-Liu"><a href="#imageencrypt-solver-Jialin-Liu" class="headerlink" title="imageencrypt (solver: Jialin Liu)"></a>imageencrypt (solver: Jialin Liu)</h3><pre><code>i0=[205, 237, 6, 158, 24, 119, 213, 32, 74, 151, 142, 186, 57, 28, 113, 62, 165,
20, 190, 37, 159, 137, 196, 44, 97, 37, 7, 222, 220, 95, 4, 66, 0, 28, 199, 142,
95, 105, 119, 232, 250, 215, 60, 162, 91, 211, 63, 30, 91, 108, 217, 206, 80,
193, 230, 42, 221, 71, 136, 115, 22, 176, 91, 57, 61, 3, 87, 73, 250, 121, 51,
72, 83, 120, 77, 199, 236, 190, 249, 116, 45, 6, 134, 110, 149, 94, 214, 232,
153, 213, 119, 98, 81, 203, 240, 114, 240, 29, 122, 188, 156, 53, 128, 185, 40,
147, 245, 204, 47, 101, 80, 229, 41, 150, 28, 195, 25, 235, 119, 6, 192, 8, 73,
255, 159, 172, 77, 94, 254, 104, 236, 219, 141, 91, 195, 162, 97, 56, 252, 173,
163, 43, 167, 214, 50, 73, 115, 190, 254, 53, 61, 77, 138, 192, 15, 4, 190, 27,
37, 108, 101, 135, 90, 215, 106, 243, 112, 111, 106, 89, 143, 150, 185, 142,
192, 176, 48, 138, 164, 185, 61, 77, 72, 0, 17, 203, 210, 71, 186, 49, 162, 250,
218, 219, 195, 63, 248, 220, 155, 180, 219, 132, 219, 94, 144, 247, 211, 95, 70,
227, 222, 31, 69, 24, 13, 216, 185, 108, 137, 57, 186, 211, 55, 27, 158, 241,
223, 21, 134, 106, 152, 127, 187, 245, 246, 131, 176, 177, 228, 100, 112, 11,
84, 61, 193, 42, 41, 69, 229, 145, 254, 138, 3, 153, 123, 31]
i1=[131, 92, 72, 47, 177, 57, 131, 118, 4, 38, 192, 19, 119, 82, 63, 143, 235,
165, 15, 140, 209, 223, 117, 133, 47, 148, 81, 144, 138, 246, 173, 235, 177,
181, 110, 39, 9, 192, 57, 166, 180, 153, 141, 19, 234, 157, 142, 80, 234, 197,
151, 152, 249, 143, 176, 155, 147, 17, 57, 194, 191, 254, 13, 144, 140, 85, 25,
248, 172, 208, 154, 249, 5, 201, 27, 137, 69, 23, 175, 34, 156, 72, 208, 32,
195, 16, 127, 65, 207, 131, 57, 203, 7, 98, 89, 36, 65, 75, 211, 21, 45, 132,
214, 239, 102, 58, 68, 130, 97, 204, 225, 76, 152, 216, 74, 149, 79, 165, 198,
72, 150, 94, 7, 177, 46, 226, 252, 247, 79, 62, 69, 106, 60, 21, 106, 236, 47,
145, 170, 28, 18, 101, 14, 152, 131, 7, 37, 15, 168, 99, 115, 27, 220, 150, 89,
82, 232, 170, 107, 221, 212, 46, 235, 129, 36, 66, 217, 222, 36, 15, 217, 192,
247, 192, 113, 230, 129, 196, 13, 247, 148, 228, 225, 86, 71, 133, 132, 238,
236, 127, 11, 83, 107, 141, 114, 150, 182, 146, 213, 250, 141, 53, 114, 16, 198,
70, 133, 17, 247, 173, 136, 73, 236, 78, 188, 150, 239, 58, 199, 136, 11, 122,
134, 77, 47, 167, 137, 188, 55, 195, 41, 49, 245, 92, 160, 213, 254, 0, 85, 205,
193, 69, 2, 140, 143, 155, 127, 236, 179, 199, 168, 35, 85, 40, 45, 174]
i2=[198, 143, 247, 3, 152, 139, 131, 84, 181, 180, 252, 177, 192, 25, 217, 179,
136, 107, 190, 62, 4, 6, 90, 53, 105, 238, 117, 44, 5, 116, 132, 195, 214, 171,
113, 209, 18, 31, 194, 174, 228, 212, 196, 14, 27, 41, 211, 56, 139, 135, 225,
214, 89, 122, 178, 212, 185, 231, 204, 150, 204, 212, 160, 142, 213, 173, 186,
166, 65, 238, 5, 32, 45, 31, 25, 189, 148, 38, 78, 79, 33, 56, 227, 48, 103,
163, 31, 189, 37, 124, 106, 249, 86, 188, 86, 233, 41, 250, 89, 7, 212, 234,
111, 104, 245, 102, 227, 96, 160, 67, 181, 13, 26, 192, 214, 210, 188, 84, 216,
215, 243, 72, 233, 2, 122, 166, 107, 251, 70, 128, 94, 190, 185, 210, 34, 85,
77, 29, 182, 77, 115, 208, 228, 252, 73, 198, 151, 70, 10, 97, 138, 235, 21,
117, 239, 102, 129, 2, 253, 80, 53, 61, 184, 220, 41, 82, 37, 140, 23, 143, 179,
53, 153, 113, 213, 211, 111, 197, 248, 65, 60, 69, 1, 81, 48, 254, 251, 89, 195,
8, 93, 190, 66, 174, 97, 175, 210, 191, 66, 112, 123, 128, 33, 230, 237, 104,
16, 192, 239, 173, 44, 10, 120, 231, 114, 151, 140, 63, 103, 44, 243, 222, 242,
73, 51, 46, 98, 137, 163, 152, 147, 95, 223, 3, 15, 112, 85, 215, 133, 131, 240,
239, 224, 195, 140, 124, 70, 156, 221, 241, 37, 245, 1, 99, 9, 157, 99, 150, 47,
118, 225, 16, 13, 141, 135, 99, 18, 119, 63, 160, 6, 247, 27, 68, 45, 199, 86,
193, 252, 21, 135, 32, 42, 103, 114, 241, 49, 249, 182, 52, 18, 155, 157, 61, 4,
246, 158, 52, 118, 242, 195, 54, 139, 232, 100, 31, 11, 233, 58, 100, 101, 137,
83, 145, 209, 7, 241, 96, 57, 148, 207, 29, 237, 124, 177, 166, 161, 20, 116,
122, 61, 71, 46, 82, 18, 157, 253, 130, 112, 66, 94, 57, 221, 243, 222, 192,
147, 5, 130, 201, 174, 26, 160, 16, 188, 103, 187, 11, 238, 182, 144, 4, 137,
33, 84, 100, 7, 239, 219, 83, 112, 189, 166, 58, 93, 141, 30, 198, 220, 196,
118, 172, 5, 45]
ia0=[a^b for a,b in zip(i0,i1)]
print(len(ia0))
ia0
label = []
temp = &quot;&quot;
key2 = 0b01001110
key1 = 0b01010110
key1 = ~key1 &amp; 0xff
# key2 = ~key2 &amp; 0xff
for a in ia0:
    if a == key1:
        temp = temp+&quot;00&quot;
    elif a == ~key1 &amp; 0xff:
        temp = temp+&quot;01&quot;
    elif a == key2:
        temp = temp+&quot;10&quot;
    elif a == ~key2 &amp; 0xff:
        temp = temp+&quot;11&quot;
    if len(temp) == 16:
        label.append(int(temp, 2))
        temp = &quot;&quot;
label=np.array(label)
print(label.shape)
print(label)
label2=label/22000
print(label2)
for i in range(len(label2)-1):
    print(label2[i+1]/(label2[i]*(3-label2[i])))
import numpy as np
s = np.arange(0, 1, 0.000001)
result=[]
for x in s:
    seqs=[]
    for i in range(32):
        x = round(1.2*x*(3-x), 6)
        seqs.append(int(x*22000))
    pred=np.array(seqs)
    result.append(((label-pred)**2).mean())
result=np.abs(np.array(result))
result.min()
from matplotlib import pyplot as plt
plt.plot(result)
from matplotlib import pyplot as plt
plt.plot(result)
print(np.argmin(result))
result[np.argmin(result)]
seqs=[]
x=0.840264
for i in range(48):
    x = round(1.2*x*(3-x), 6)
    seqs.append(int(x*22000))
pred=np.array(seqs)
# print(((label-pred)**2).mean())
print(pred)
bins = &#39;&#39;
for x in pred:
    bin_x = bin(x)[2:]
    if len(bin_x) &lt; 16:
        bin_x = &#39;0&#39;*(16-len(bin_x))+bin_x
    bins += bin_x
m=24
n=16
cipher = [0 for i in range(m) for j in range(n)]
for i in range(m):
    for j in range(n):
        index = n*i+j
        ch = int(bins[2*index:2*index+2], 2)
        pix = i2[index]
        if ch == 0:
            pix = (pix ^ key1) &amp; 0xff
        if ch == 1:
            pix = (~pix ^ key1) &amp; 0xff
        if ch == 2:
            pix = (pix ^ key2) &amp; 0xff
        if ch == 3:
            pix = (~pix ^ key2) &amp; 0xff
        cipher[index] = pix
print(cipher)
print(len(cipher))
# print(i1)
</code></pre>
]]></content>
      <categories>
        <category>ciscn</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn2020公开赛 write-up</title>
    <url>/2020/08/25/ciscn2020/</url>
    <content><![CDATA[<blockquote>
<p>author:DUT-2020  solve：9 战队排名：27</p>
</blockquote>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="1-签到-（solver-Yuning-Ding）"><a href="#1-签到-（solver-Yuning-Ding）" class="headerlink" title="1 签到 （solver: Yuning Ding）"></a>1 签到 （solver: Yuning Ding）</h3><p>略</p>
<h3 id="2-the-best-ctf-game（solver-Yuning-Ding）"><a href="#2-the-best-ctf-game（solver-Yuning-Ding）" class="headerlink" title="2 the best ctf game（solver: Yuning Ding）"></a>2 the best ctf game（solver: Yuning Ding）</h3><p>用文本文档打开，把一些字符替换成空白，看到flag。（不小心删了附件，似乎附件比赛结束后不能下载了）</p>
<h3 id="3-dump-disk（solver-Yuning-Ding）"><a href="#3-dump-disk（solver-Yuning-Ding）" class="headerlink" title="3 dump_disk（solver: Yuning Ding）"></a>3 dump_disk（solver: Yuning Ding）</h3><p>使用mount命令挂载，看到一个png，一个elf和一个fakeflag，根据题意，猜测是误删文件，用extundelete工具恢复（工具内置于kali linux）</p>
<blockquote>
<p>sudo extundelete &#x2F;dev&#x2F;loop1 –restore-all</p>
</blockquote>
<p>得到一个加密后的flag，然后ida查看elf文件，发现加密流程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">68</span>,<span class="number">42</span>,<span class="number">3</span>,<span class="number">229</span>,<span class="number">41</span>,<span class="number">163</span>,<span class="number">175</span>,<span class="number">98</span>,<span class="number">5</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">243</span>,<span class="number">214</span>,<span class="number">235</span>,<span class="number">144</span>,<span class="number">102</span>,<span class="number">36</span>,<span class="number">92</span>,<span class="number">183</span>,<span class="number">146</span>,<span class="number">246</span>,<span class="number">215</span>,<span class="number">77</span>,<span class="number">11</span>,<span class="number">106</span>,<span class="number">65</span>,<span class="number">163</span>,<span class="number">133</span>,<span class="number">239</span>,<span class="number">144</span>,<span class="number">90</span>,<span class="number">126</span>,<span class="number">91</span>,<span class="number">236</span>,<span class="number">193</span>,<span class="number">240</span>,<span class="number">212</span>,<span class="number">97</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">69</span>,<span class="number">235</span>,<span class="number">184</span>]</span><br><span class="line">v4=<span class="number">34</span></span><br><span class="line">v5=<span class="number">0</span></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a)-<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># print(v4,v5)</span></span><br><span class="line">    <span class="built_in">str</span>=<span class="built_in">str</span>+<span class="built_in">chr</span>(((a[i]^v4)-v5)%<span class="number">256</span>)</span><br><span class="line">    v5=(v5+<span class="number">2</span>)&amp;<span class="number">0xf</span></span><br><span class="line">    v4=v4+<span class="number">34</span></span><br><span class="line"><span class="comment"># flag&#123;e5d7c4ed-b8f6-4417-8317-b809fc26c047&#125;</span></span><br></pre></td></tr></table></figure>

<p>flag{e5d7c4ed-b8f6-4417-8317-b809fc26c047}</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><blockquote>
<p>第一次写正式的wp，比赛时的payload忘保存了，幸好还有环境，以下都是写wp的时候重新测试的，可能与提交的payload不完全相同（似乎flag跟之前不一样？不知道是不是错觉）</p>
</blockquote>
<h3 id="rceme-（solver-Yuning-Ding）"><a href="#rceme-（solver-Yuning-Ding）" class="headerlink" title="rceme （solver: Yuning Ding）"></a>rceme （solver: Yuning Ding）</h3><p>很容易想到system cat flag，根据给定的格式 $pattern &#x3D; ‘&#x2F;{if:([\s\S]+?)}([\s\S]*?){end\s+if}&#x2F;’; 以及限制的语法构造payload，得到&#x2F;?a&#x3D;{if:(%27sys%27.%27tem%27)(%27cat%20&#x2F;flag%27)}{end%20if} (system语法不可使用，所以进行了切割)</p>
<p>得到flag flag{5b8eaf10-a3c0-4697-a164-376b495f6800}</p>
<h3 id="easytrick-（solver-Yuning-Ding）"><a href="#easytrick-（solver-Yuning-Ding）" class="headerlink" title="easytrick （solver: Yuning Ding）"></a>easytrick （solver: Yuning Ding）</h3><p>我们要让构造符合题目中的要求，需要满足的条件有，trick1和trick2不能相等，trick1和trick2长度不能大于5，我们可以让trick为整数，这里设置为2，让trick2为double的2.00000000000001</p>
<p>发现比赛时候写的payload没保存，幸好还有环境，现写了一个payload：</p>
<p>?trick&#x3D;O:5:”trick”:2:{s:6:”trick1”;i:2;s:6:”trick2”;d:2.00000000000001;}</p>
<p>得到flag flag{8c02a599-2a41-462b-92ba-89efc8a79554}</p>
<h3 id="easyphp-（solver-Yuning-Ding）"><a href="#easyphp-（solver-Yuning-Ding）" class="headerlink" title="easyphp （solver: Yuning Ding）"></a>easyphp （solver: Yuning Ding）</h3><p>很显然是通过a和b来想办法进入phpinfo</p>
<p>对a的输入有一定的限制，看到call_user_func_array给了我灵感，可以把a设置为call_user_func,那么b很显然是pcntl_wait,所以payload为 ?a&#x3D;call_user_func&amp;b&#x3D;pcntl_wait</p>
<p>找到flag flag{a2dd41ac-377d-4148-931e-2adbe9c616c0}</p>
<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="z3-（solver-Yuning-Ding）"><a href="#z3-（solver-Yuning-Ding）" class="headerlink" title="z3 （solver: Yuning Ding）"></a>z3 （solver: Yuning Ding）</h3><p>使用z3库解题，每组是一个七元方程式,一共六组，方程左侧一致，右侧对应数组值（下面就是一组方程式的求解）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">s=Solver()</span><br><span class="line">a=[<span class="number">0</span>]*<span class="number">7</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    a[i]=Int(<span class="string">&#x27;a[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">s.add( <span class="number">12</span> * a[<span class="number">0</span>] + <span class="number">53</span> * a[<span class="number">1</span>] + <span class="number">6</span> * a[<span class="number">2</span>] +<span class="number">34</span> * a[<span class="number">3</span>]+ <span class="number">58</span> * a[<span class="number">4</span>] + <span class="number">36</span> * a[<span class="number">5</span>] + a[<span class="number">6</span>]==<span class="number">0x3759</span>)</span><br><span class="line">s.add(<span class="number">83</span> * a[<span class="number">0</span>] + <span class="number">85</span> * a[<span class="number">1</span>] + <span class="number">12</span> * a[<span class="number">2</span>] +<span class="number">73</span> * a[<span class="number">3</span>]+ <span class="number">27</span> * a[<span class="number">4</span>] + <span class="number">96</span> * a[<span class="number">5</span>] + <span class="number">52</span>*a[<span class="number">6</span>]==<span class="number">0x8953</span>)</span><br><span class="line">s.add(<span class="number">78</span> * a[<span class="number">0</span>] + <span class="number">53</span> * a[<span class="number">1</span>] + <span class="number">24</span> * a[<span class="number">2</span>] +<span class="number">36</span> * a[<span class="number">3</span>]+ <span class="number">86</span> * a[<span class="number">4</span>] + <span class="number">25</span> * a[<span class="number">5</span>] + <span class="number">46</span>*a[<span class="number">6</span>]==<span class="number">0x7122</span>)</span><br><span class="line">s.add(<span class="number">39</span> * a[<span class="number">0</span>] + <span class="number">78</span> * a[<span class="number">1</span>] + <span class="number">52</span> * a[<span class="number">2</span>] +<span class="number">9</span> * a[<span class="number">3</span>]+ <span class="number">62</span> * a[<span class="number">4</span>] + <span class="number">37</span> * a[<span class="number">5</span>] + <span class="number">84</span>*a[<span class="number">6</span>]==<span class="number">0x81f9</span>)</span><br><span class="line">s.add(<span class="number">23</span> * a[<span class="number">0</span>] + <span class="number">6</span>* a[<span class="number">1</span>] + <span class="number">14</span> * a[<span class="number">2</span>] +<span class="number">74</span> * a[<span class="number">3</span>]+ <span class="number">48</span> * a[<span class="number">4</span>] + <span class="number">12</span> * a[<span class="number">5</span>] + <span class="number">83</span>*a[<span class="number">6</span>]==<span class="number">0x5524</span>)</span><br><span class="line">s.add(<span class="number">27</span> * a[<span class="number">0</span>] + <span class="number">85</span> * a[<span class="number">1</span>] + <span class="number">92</span> * a[<span class="number">2</span>] +<span class="number">42</span> * a[<span class="number">3</span>]+ <span class="number">48</span> * a[<span class="number">4</span>] + <span class="number">15</span> * a[<span class="number">5</span>] + <span class="number">72</span>*a[<span class="number">6</span>]==<span class="number">0x8971</span>)</span><br><span class="line">s.add(<span class="number">4</span> * a[<span class="number">0</span>] + <span class="number">6</span> * a[<span class="number">1</span>] + <span class="number">3</span> * a[<span class="number">2</span>] +<span class="number">67</span> * a[<span class="number">3</span>] + <span class="number">26</span> * a[<span class="number">5</span>] + <span class="number">68</span>*a[<span class="number">6</span>]==<span class="number">0x3a1d</span>)</span><br><span class="line">s.check()</span><br><span class="line"><span class="built_in">print</span>(s.model())</span><br></pre></td></tr></table></figure>

<p>将6组方程全部解完，得到flag</p>
<h3 id="hyperthread（solver-Yuning-Ding）"><a href="#hyperthread（solver-Yuning-Ding）" class="headerlink" title="hyperthread（solver: Yuning Ding）"></a>hyperthread（solver: Yuning Ding）</h3><p>调试程序，发现创建了几个线程，分析代码，第一个线程代码有junk code（addr jmp addr+1，需要恢复数据后重新生成正确代码），处理之后发现对输入的字符串进行了一系列运算，第二个线程是对输入的字符分别加0（就是没变化），最后比对，逆向写出算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#a是比对的数组</span></span><br><span class="line">b=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a)):</span><br><span class="line">    tmp=((a[i]-<span class="number">35</span>)^<span class="number">0x23</span>)&amp;<span class="number">0xff</span></span><br><span class="line">    tmp= <span class="string">&#x27;&#123;:08b&#125;&#x27;</span>.<span class="built_in">format</span>(tmp)</span><br><span class="line">    b.append(tmp)</span><br><span class="line">c=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    <span class="comment">#print(int(i[2:]+i[0:2],2))</span></span><br><span class="line">    c=c+<span class="built_in">chr</span>(<span class="built_in">int</span>(i[<span class="number">2</span>:]+i[<span class="number">0</span>:<span class="number">2</span>],<span class="number">2</span>))</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>

<p>flag{a959951b-76ca-4784-add7-93583251ca92}</p>
<h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="bd-（solver：Yuning-Ding）"><a href="#bd-（solver：Yuning-Ding）" class="headerlink" title="bd （solver：Yuning Ding）"></a>bd （solver：Yuning Ding）</h3><p>wiener attack，适用于e很大的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wiener_hack</span>(<span class="params">e, n</span>):</span><br><span class="line">    <span class="comment"># firstly git clone https://github.com/pablocelayes/rsa-wiener-attack.git !</span></span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line">    <span class="keyword">for</span> (k, d) <span class="keyword">in</span> convergents:</span><br><span class="line">        <span class="keyword">if</span> k != <span class="number">0</span> <span class="keyword">and</span> (e * d - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            discr = s * s - <span class="number">4</span> * n</span><br><span class="line">            <span class="keyword">if</span> (discr &gt;= <span class="number">0</span>):</span><br><span class="line">                t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">                <span class="keyword">if</span> t != -<span class="number">1</span> <span class="keyword">and</span> (s + t) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Hacked!&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="number">86966590627372918010571457840724456774194080910694231109811773050866217415975647358784246153710824794652840306389428729923771431340699346354646708396564203957270393882105042714920060055401541794748437242707186192941546185666953574082803056612193004258064074902605834799171191314001030749992715155125694272289</span>   </span><br><span class="line">    e = <span class="number">46867417013414476511855705167486515292101865210840925173161828985833867821644239088991107524584028941183216735115986313719966458608881689802377181633111389920813814350964315420422257050287517851213109465823444767895817372377616723406116946259672358254060231210263961445286931270444042869857616609048537240249</span></span><br><span class="line"></span><br><span class="line">    c = <span class="number">37625098109081701774571613785279343908814425141123915351527903477451570893536663171806089364574293449414561630485312247061686191366669404389142347972565020570877175992098033759403318443705791866939363061966538210758611679849037990315161035649389943256526167843576617469134413191950908582922902210791377220066</span></span><br><span class="line"></span><br><span class="line">    d = wiener_hack(e, n)</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">    <span class="built_in">print</span> long_to_bytes(m)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>flag{d3752538-90d0-c373-cfef-9247d3e16848}</p>
]]></content>
      <categories>
        <category>ciscn</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
</search>
